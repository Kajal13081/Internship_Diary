https://www.geeksforgeeks.org/find-maximum-difference-between-nearest-left-and-right-smaller-elements/


// { Driver Code Starts
import java.util.*;

class GFG
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t>0)
		{
			int n = sc.nextInt();
			int a[] = new int[n];
			for(int i=0; i<n; i++)
				a[i] = sc.nextInt();
			Solution ob = new Solution();
			System.out.println(ob.findMaxDiff(a,n));
		t--;
		}
	}
}// } Driver Code Ends



class Solution
{
    int findMaxDiff(int a[], int n) {
        int[] left = new int[n];
        Stack<Integer> st1 = new Stack<>();
        
        st1.push(n - 1);
        for (int i = n - 2; i >= 0; i--) {
            while (st1.size() > 0 && a[i] < a[st1.peek()]) {
                left[st1.peek()] = a[i];
                st1.pop();
            }
            st1.push(i);
        }
        
        int[] right = new int[n];
        Stack<Integer> st2 = new Stack<>();
        
        st2.push(0);
        for (int i = 1; i < n; i++) {
            while (st2.size() > 0 && a[i] < a[st2.peek()]) {
                right[st2.peek()] = a[i];
                st2.pop();
            }
            st2.push(i);
        }
        
        int max = 0;
        for (int i = 0; i < n; i++) {
            int diff = Math.abs(right[i] - left[i]);
            if (diff > max) {
                max = diff;
            }
        }
        return max;
    }
}
